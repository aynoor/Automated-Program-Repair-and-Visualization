{
  "name": "heartbeats",
  "version": "3.1.3",
  "description": "Very efficiently manage time-based events and objects.",
  "main": "main.js",
  "scripts": {
    "test": "nodeunit test/test.js",
    "browser-heartbeats": "browserify . -o heartbeats.js -s heartbeats",
    "benchmark": "node ./test/benchmark.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/arjunmehta/node-heartbeats.git"
  },
  "devDependencies": {
    "nodeunit": "~0.8.8",
    "benchmark": "~1.0.0"
  },
  "keywords": [
    "heartbeat",
    "heartbeats",
    "setInterval",
    "setTimeout",
    "pulse",
    "timing",
    "timer",
    "relativity",
    "interval",
    "timeout",
    "events",
    "event manager"
  ],
  "author": {
    "name": "Arjun Mehta"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/arjunmehta/node-heartbeats/issues"
  },
  "homepage": "https://github.com/arjunmehta/node-heartbeats",
  "readme": "# node-heartbeats\n\n[![Build Status](https://travis-ci.org/arjunmehta/node-heartbeats.svg?branch=master)](https://travis-ci.org/arjunmehta/node-heartbeats)\n\n![heartbeats title image](https://raw.githubusercontent.com/arjunmehta/node-heartbeats/image/heartbeats.png)\n\nA simple Node module to very efficiently manage time-based objects and events.\n\nUse this library for comparing large numbers of _relativistic_ time lapses efficiently and for synchronizing the execution of events based on these time lapses. In effect:\n\n- **Execute functions on specific Heartbeat intervals**\n- **Compare the time properties of multiple objects (Pulses) to a global time measure (Heart) operating on a specific time resolution (Heartrate)**\n\nThis library uses a much more efficient (lower resolution) method of testing system level event times as relativistic time differentials (vs. universal time differentials). Think larger chunked time measures (interval counts) instead of actual milliseconds. It's also great at managing the execution of events that require precise in-system synchronization.\n\n## Basic Usage\n\n### Install\n```bash\nnpm install heartbeats\n```\n\n### Add to your project\n```javascript\nvar heartbeats = require('heartbeats');\n```\n\n### Create a New Heart\nA `Heart` is the main object you use to measure time. It has a core heartrate, and beats at a specified time interval (in milliseconds).\n\n```javascript\n// a heart that beats every 1 second.\nvar heart = heartbeats.createHeart(1000);\n```\n\nThe running essence of the `Heart` is its own internal heartbeat count. How many times has it beat? We call this the Heart's age.\n\n```javascript\nvar age = heart.age;\n```\n\n### Heart Events\nHearts manage Events, and execute blocks on specific heart beats, either continually (like `setInterval`) or just once (like `setTimeout`).\n\nThis is much more efficient and much more reliable than using multiple `setInterval` methods, as they usually get unsynchronized, and introduce memory issues.\n\n```javascript\n// Alternative to setInterval\nheart.createEvent(5, function(heartbeat, last){\n  console.log('...Every 5 Beats forever');\n});\n\nheart.createEvent(1, function(heartbeat, last){\n  console.log('...Every Single Beat forever');\n});\n\nheart.createEvent(1, {repeat: 3}, function(heartbeat, last){\n  console.log('...Every Single Beat for 3 beats only');\n  if(last === true){\n    console.log('...the last time.')\n  }\n});\n\n// Alternative to setTimeout\nheart.createEvent(2, {repeat: 1}, function(heartbeat, last){\n  console.log('...Once after 2 Beats');\n});\n```\n\n### Heart Pulses\nA `Pulse` is an object used to measure how synchronized part of your system is to a central `Heart`. This is super useful as it allows you to very efficiently measure if things are lagging, or working as they should with respect to that `heartbeat`.\n\n```javascript\nvar pulseA = heart.createPulse();\nvar pulseB = heart.createPulse();\n```\n\nNow, instead of storing an event's time as `Date().now()` or `Date().getTime()` and comparing those values to some other time, you `pulse.beat()` to synchronize the Pulse's time with its Heart.\n\n```javascript\npulseA.beat();\npulseB.beat();\n```\n\nSo, if we want to know how far off an object is from the Heart, we can use the Pulse's `missedBeats` property. For example:\n\n```javascript\nconsole.log( pulseA.missedBeats ); // 0\nconsole.log( pulseB.missedBeats ); // 0\n\nsetInterval(function(){\n  pulseB.beat(); // Only synchronizing pulseB with the Heart.\n  console.log( pulseA.missedBeats ); // 2, 4, 6, 8\n  console.log( pulseB.missedBeats ); // 0\n}, 2000);\n```\n\n### Kill That Heart\nLike any ongoing interval, you should kill the Heart once you no longer need it, otherwise it's likely your program will not exit until it has been properly killed.\n\n```javascript\nheart.kill();\n```\n\n\n## About Efficiency\n\nWhy is this library faster than more conventional methods? Basically, instead of using `Date().now()` or `new Date().getTime()` which are relatively very slow operations that give you very precise, universal values for the **present time**, we use the present moment of a heartbeat to give your events a time relative to that particular heart. This simple change results in extremely fast and efficient time difference calculations because it operates at a very low resolution compared to methods using the Date object, and compares basic integers vs comparing dates. View the source to see details.\n\n### Test Performance\nIf you're curious, I've included a performance test using `benchmark.js` which compares a more traditional way of testing times.\n\n```bash\n# switch to the heartbeats module directory\ncd node_modules/heartbeats\n\n# install dev dependencies for the heartbeats module\nnpm install\n\n# run benchmark test\nnpm run benchmark\n```\n\nHave a look at the `benchmark.js` file in the tests directory to see how the benchmark is done.\n\n\n## API\n\nThe API is fairly straightforward, though it's good to be aware of nuances in its use.\n\n### The Heart\n#### heartbeats.createHeart(heartrate, name);\nCreates and returns a new `Heart` object.\n\nIf you provide a name, the heart is registered in the module's list of hearts (see **heartbeats.heart()**). This is useful if you want to access heartbeats from different modules.\n\n```javascript\n// a new heart that beats every 2 seconds named 'heartA'\nvar heart = heartbeats.createHeart(2000, 'heartA');\n```\n\nIf you don't provide a name, the heart will be returned but will not be added to the `heartbeats.hearts` object.\n\n```javascript\nvar heart = heartbeats.createHeart(2000);\nconsole.log(heart.name); // heart_kajg8i27tjhv\n```\n\n#### heartbeats.hearts\nAn object with all hearts that have been instantiated with a name.\n\n#### heartbeats.heart(name)\nReturns a `Heart` object with a name from the managed list of hearts.\n\n```javascript\n// gets a heart named 'heartA'\nvar heart = heartbeats.heart('heartA');\n```\n\n#### heartbeats.killHeart(name)\nRemoves the `Heart` from the internal managed list and clears the heartbeat interval. This only works if the heart was created with a `name`.\n\n```javascript\n// destroys the 'heartA' heart(beat)\nheartbeats.killHeart('heartA');\n```\n\n#### heart.kill()\nClears the heartbeat interval and removes the Heart from the internal managed list if it exists there.\n\n```javascript\nheartbeats.heart('heartA').kill();\n```\n\n\n#### heart.setHeartrate(heartrate)\nUpdates the heartrate period of the `Heart` and returns the `Heart` object for chaining.\n```javascript\nheartbeats.heart('heartA').setHeartrate(3000);\n```\n\n#### heart.age\nGets the current number of beats that the heart has incremented in its lifetime.\n\n```javascript\nheartbeats.heart('heartA').age;\n```\n\n\n### The Pulse\n\n#### heart.createPulse(name);\nReturns a new Pulse object associated with the heart.\n\nIf you provide a name, the Pulse is added to the Heart's internal managed list of Pulses (ie. `heart.pulses`). This is useful if \n\n```javascript\n// creates a new pulse from the 'heartA' heart(beat)\nvar pulse = heartbeats.heart('heartA').createPulse('A');\n```\n\nIf you don't provide a name, the pulse will be returned without being added to the Heart's managed list of Pulses.\n\n```javascript\nvar pulseA = heartbeats.heart('heartA').createPulse();\n```\n\n#### heart.pulses\nAn object with all pulses belonging to the heart, that have been instantiated with a name.\n\n#### heart.pulse(name);\nReturns the Pulse object from the heart's managed list of pulses.\n```javascript\nvar pulseA = heartbeats.heart('heartA').pulse('A');\n```\n\n#### heart.killPulse(name);\nKills the Pulse and removes it from the heart's managed list of Pulses.\n```javascript\nvar pulse = heartbeats.heart('heartA').pulse('A');\n```\n\n#### pulse.kill()\nKills the pulse and removes it from its heart's managed list (if it exists there).\n\n```javascript\n// clears the pulse from memory\npulse.kill();\n```\n\n\n#### pulse.beat()\nThis synchronizes the pulse with its Heart. **This is the secret sauce**. Instead of using `Date().now()` or `Date().getTime()` to register an event time we match the time of the pulse with the heart.\n\nReturns the `Pulse` object to chain if needed.\n\n```javascript\n// synchronizes the pulse to its heart\npulse.beat();\n```\n\n#### pulse.missedBeats\nThe number of heartbeats that have passed since the pulse was last synchronized with `pulse.beat()`.\n\n```javascript\n// gets the number of beats the pulse is off from its heart\nvar beatoffset = pulse.missedBeats;\n```\n\n#### pulse.lag;\nReturns an approximate number of milliseconds the pulse is lagging behind the main heartbeat. Basically this is `pulse.missedBeats*heart.heartrate`.\n```javascript\n// gets an approximate number of milliseconds the pulse is delayed from the heart\nvar delay = pulse.lag;\n```\n\n\n### Beat Events\n\n`node-heartbeats` makes it easy for you to synchronize event execution without the need for multiple `setInterval` or `setTimeout` initializers. It ensures that actions are synchronized with respect to the heart's beat and uses the heartbeat as the measure for action, and won't get unsynchronized as is what happens when multiple `setInterval` or `setTimeout` methods are used.\n\n#### heart.createEvent(beatInterval, options, function)\nThis method is slightly different from the other creation methods (ie. `createHeart` and `createPulse`). Giving the object a name is done by passing a value to the options object.\n\nThis method will add a reoccuring event to the heart. Every `nth` beat specified by `beatInterval` will execute the supplied function. This method counts from the time you add the event. It's kind of like `setInterval`.\n\n\n\n##### Options\n`name`: Give the Event a custom name, so you can reference it, kill it, or modify it using `heart.event(name)`\n`repeat`: default is `0` (infinite). Repeat the event a specified number of times (use `0` for infinite). If set to a finite number, the event will be killed and cleared from memory once executed the last time.\n\n##### Callback Function\nThe callback function is called with `heartbeat` and `last` as arguments.\n\nThe following example creates a new event called `checkA`, on an existing heart named `heartA` that executes every 5th beat, repeats forever. The `last` argument passed to the callback will always be `false`.\n\n```javascript\nvar event = heartbeats.heart('heartA').createEvent(5, {name: 'checkA', repeat: 0}, function(heartbeat, last){\n  console.log('does this every 5 beats');\n});\n```\n\nThe following example creates an anonymous event on the heart named `heartA` that excutes every 4th beats but stops once it has been executed 3 times.\n\n```javascript\nheartbeats.heart('heartA').createEvent(4, {repeat: 3}, function(heartbeat, last){\n  console.log('does this every 4 beats');\n  if(last === true){\n    console.log('this is the last execution of this method')\n  }\n});\n```\n\n#### heart.event(name)\nReturns the `Event` with the specified name from the heart.\n```javascript\nvar event = heartbeats.heart('heartA').event('checkA');\n```\n\n#### heart.killEvent(name)\nThis will instantly kill the event specified by the name.\n```javascript\nheartbeats.heart('heartA').killEvent('checkA');\n```\n\n#### heart.killAllEvents()\nThis will clear all beat events from the heart.\n```javascript\nheartbeats.heart('heartA').killAllEvents();\n```\n\n#### event.kill()\nThis will instantly kill the event specified by the name.\n```javascript\nheartbeats.heart('heartA').event('checkA').kill();\n```\n\n\n## For the Browser\nHeartbeats works for the browser too! To compile the script for the browser just make sure browserify is installed on your system:\n```bash\nnpm install -g browserify\n```\n\nThen head to this module's directory and run the browser-heartbeats script with npm:\n```bash\ncd node_modules/heartbeats\nnpm run browser-heartbeats\n```\n\nBrowserify will generate a `heartbeats.js` file for you. Copy this file to your project and include the script in your html.\n\n```html\n<script src=\"heartbeats.js\"/>\n```\n\nThen use heartbeats in accordance with the API.\n\n```javascript\nvar heart = heartbeats.createHeart(2000, 'heartA');\n// etc etc\n```\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Arjun Mehta\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "heartbeats@3.1.3",
  "_from": "heartbeats@"
}
