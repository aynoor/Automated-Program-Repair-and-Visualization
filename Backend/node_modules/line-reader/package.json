{
  "name": "line-reader",
  "version": "0.3.0",
  "description": "Asynchronous line-by-line file reader",
  "url": "https://github.com/nickewing/line-reader",
  "keywords": [
    "file",
    "line",
    "reader",
    "scanner"
  ],
  "author": {
    "name": "Nick Ewing",
    "email": "nick@nickewing.net"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/line_reader",
  "repository": {
    "type": "git",
    "url": "https://nickewing@github.com/nickewing/line-reader.git"
  },
  "readme": "Line Reader\n===========\n\nAsynchronous line-by-line file reader.\n\nInstall\n-------\n\n`npm install line-reader`\n\nUsage\n-----\n\nThe `eachLine` function reads each line of the given file.  Upon each new line,\nthe given callback function is called with two parameters: the line read and a\nboolean value specifying whether the line read was the last line of the file.\nIf the callback returns `false`, reading will stop and the file will be closed.\n\n    var lineReader = require('line-reader');\n\n    lineReader.eachLine('file.txt', function(line, last) {\n      console.log(line);\n\n      if (/* done */) {\n        return false; // stop reading\n      }\n    });\n\n`eachLine` can also be used in an asynchronous manner by providing a third\ncallback parameter like so:\n\n    var lineReader = require('line-reader');\n\n    lineReader.eachLine('file.txt', function(line, last, cb) {\n      console.log(line);\n\n      if (/* done */) {\n        cb(false); // stop reading\n      } else {\n        cb();\n      }\n    });\n\nYou can provide an optional second node-style callback that will be called with\n`(err)` on failure or `()` when finished (even if you manually terminate iteration\nby returning `false` from the iteratee):\n\n    var lineReader = require('line-reader');\n\n    // read all lines:\n    lineReader.eachLine('file.txt', function(line) {\n      console.log(line);\n    }).then(function (err) {\n      if (err) throw err;\n      console.log(\"I'm done!!\");\n    });\n\nFor more granular control, `open`, `hasNextLine`, and `nextLine` maybe be used\nto iterate a file (but you must `close` it yourself):\n\n    // or read line by line:\n    lineReader.open('file.txt', function(err, reader) {\n      if (err) throw err;\n      if (reader.hasNextLine()) {\n        reader.nextLine(function(err, line) {\n          try {\n            if (err) throw err;\n            console.log(line);\n          } finally {\n            reader.close(function(err) {\n              if (err) throw err;          \n            });\n          }\n        });\n      }\n      else {\n        reader.close(function(err) {\n          if (err) throw err;          \n        });\n      }\n    });\n\nYou may provide additional options in a hash before the callbacks to `eachLine` or `open`:\n* `separator`   - a `string` or `RegExp` separator (defaults to `/\\r\\n?|\\n/`)\n* `encoding`    - file encoding (defaults to `'utf8'`)\n* `bufferSize`  - amount of bytes to buffer (defaults to 1024)\n\nFor example:\n\n    lineReader.eachLine('file.txt', {separator: ';', encoding: 'utf8'}, function(line, last, cb) {\n      console.log(line);\n    });\n    lineReader.open('file.txt', {bufferSize: 1024}, function(err, reader) {\n      ...\n    }); \n\nPromises\n--------\n\n`eachLine` and `open` are compatible with `promisify` from [bluebird](https://github.com/petkaantonov/bluebird/blob/master/API.md#promisepromisifyfunction-nodefunction--dynamic-receiver---function):\n\n    var lineReader = require('line-reader'),\n        Promise = require('bluebird');\n\n    var eachLine = Promise.promisify(lineReader.eachLine);\n    eachLine('file.txt', function(line) {\n      console.log(line);\n    }).then(function() {\n      console.log('done');\n    }).catch(function(err) {\n      console.error(err);\n    });\n\nIf you're using a promise library that doesn't have a promisify function, here's how you can do it:\n\n    var lineReader = require('line-reader'),\n        Promise = require(...);\n\n    var eachLine = function(filename, options, iteratee) {\n      return new Promise(function(resolve, reject) {\n        lineReader.eachLine(filename, options, iteratee, function(err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n    eachLine('file.txt', function(line) {\n      console.log(line);\n    }).then(function() {\n      console.log('done');\n    }).catch(function(err) {\n      console.error(err);\n    });\n\nContributors\n------------\n\n* Nick Ewing\n* Andy Edwards (jedwards1211)\n* Jameson Little (beatgammit)\n* Masum (masumsoft)\n* Matthew Caruana Galizia (mattcg)\n* Ricardo Bin (ricardohbin)\n\nPaul Em has also written a reverse-version of this gem to read files from bottom to top: [reverse-line-reader](https://github.com/paul-em/reverse-line-reader).\n\nCopyright 2011 Nick Ewing.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nickewing/line-reader/issues"
  },
  "_id": "line-reader@0.3.0",
  "dist": {
    "shasum": "467ba173e75ad58cedd14efcec3fbd74af80ff9d"
  },
  "_from": "line-reader@",
  "_resolved": "https://registry.npmjs.org/line-reader/-/line-reader-0.3.0.tgz"
}
